{"ast":null,"code":"var _jsxFileName = \"/Users/medha/Downloads/Internship Final Project/frontend/src/components/SearchComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchComponent = ({\n  onResults\n}) => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const handleSearch = () => {\n    // Assuming recipes is accessible here; typically, you would pass a list to filter.\n    const filteredResults = []; // Add your logic to filter recipes based on searchTerm\n    onResults(filteredResults);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value),\n      placeholder: \"Search for a recipe...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n_s(SearchComponent, \"a1cMJ8t0eYFnsCEdGcHtaGJdbCM=\");\n_c = SearchComponent;\nexport default SearchComponent;\nvar _c;\n$RefreshReg$(_c, \"SearchComponent\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SearchComponent","onResults","_s","searchTerm","setSearchTerm","handleSearch","filteredResults","className","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/medha/Downloads/Internship Final Project/frontend/src/components/SearchComponent.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst SearchComponent = ({ onResults }) => {\n    const [searchTerm, setSearchTerm] = useState('');\n\n    const handleSearch = () => {\n        // Assuming recipes is accessible here; typically, you would pass a list to filter.\n        const filteredResults = []; // Add your logic to filter recipes based on searchTerm\n        onResults(filteredResults);\n    };\n\n    return (\n        <div className=\"search-box\">\n            <input \n                type=\"text\" \n                value={searchTerm} \n                onChange={(e) => setSearchTerm(e.target.value)} \n                placeholder=\"Search for a recipe...\" \n            />\n            <button onClick={handleSearch}>Search</button>\n        </div>\n    );\n};\n\nexport default SearchComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMQ,YAAY,GAAGA,CAAA,KAAM;IACvB;IACA,MAAMC,eAAe,GAAG,EAAE,CAAC,CAAC;IAC5BL,SAAS,CAACK,eAAe,CAAC;EAC9B,CAAC;EAED,oBACIP,OAAA;IAAKQ,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACvBT,OAAA;MACIU,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEP,UAAW;MAClBQ,QAAQ,EAAGC,CAAC,IAAKR,aAAa,CAACQ,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC/CI,WAAW,EAAC;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC,eACFnB,OAAA;MAAQoB,OAAO,EAAEd,YAAa;MAAAG,QAAA,EAAC;IAAM;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEd,CAAC;AAAChB,EAAA,CApBIF,eAAe;AAAAoB,EAAA,GAAfpB,eAAe;AAsBrB,eAAeA,eAAe;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}